<?xml version="1.0" encoding="UTF-8"?>
<project name="opensftp" default="build" basedir=".">
	<!-- Set global properties for this build -->
	<property name="build.src" value="./src" />
	<property name="build.test" value="./test" />
	<property name="build.samples" value="./samples" />
	<property name="build.dependency" value="./lib" />
	<property name="build.dist" value="./dist" />
	<property name="build.dist.classes" value="${build.dist}/classes" />
	<property name="build.dist.lib" value="${build.dist}/lib" />
	<property name="build.dist.docs" value="./docs" />
	<property name="build.dist.javadocs" value="${build.dist.docs}/javadocs" />
	<property name="build.dist.release" value="${build.dist}/release" />

	<!-- Global build parameters -->
	<property file="project.properties" />

	<!-- Indicates whether source should be compiled with debug information. ture/off -->
	<property name="build.debugInformation" value="true" />

	<!-- Project classpath -->
	<path id="project.class.path">
		<fileset dir="${build.dependency}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.dist.classes}/" />
	</path>

	<!-- =================================================================== -->
	<!-- Help info about usage                                                       -->
	<!-- =================================================================== -->
	<target name="usage">
		<echo message="" />
		<echo message="" />
		<echo message="opensftp build file" />
		<echo message="-------------------------------------------------------------" />
		<echo message="" />
		<echo message=" available targets are:" />
		<echo message="" />
		<echo message="   clean    --> cleans up the directory" />
		<echo message="   compile  --> compiles the source code" />
		<echo message="   compile-sample  --> compiles the samples" />
		<echo message="   build(default)  --> generates jar files" />
		<echo message="   javadoc  --> generates the full JavaDoc documentation" />
		<echo message="   release      --> cleans then builds everything (default)" />
		<echo message="" />
		<echo message="-------------------------------------------------------------" />
		<echo message="" />
	</target>

	<!-- =================================================================== -->
	<!-- create the build directory                                         -->
	<!-- =================================================================== -->
	<target name="prepare" depends="clean">
		<!-- Create the output directory -->
		<mkdir dir="${build.dist}" />
		<mkdir dir="${build.dist.classes}" />
	</target>

	<!-- =================================================================== -->
	<!-- Prepare the resources                                               -->
	<!-- =================================================================== -->
	<target name="prepare-src" depends="prepare">
		<!-- Copy the projects resources to the classpath -->
		<echo message="Copying resource to classpath" />
		<copy todir="${build.dist.classes}">
			<fileset dir="${build.src}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Compile the sources                                                 -->
	<!-- =================================================================== -->
	<target name="compile" depends="prepare-src">
		<javac srcdir="${build.src}" debug="${build.debugInformation}" destdir="${build.dist.classes}" includes="**/*.java" source="1.5" target="1.5" encoding="UTF-8">
			<classpath refid="project.class.path" />
		</javac>
	</target>


	<!-- =================================================================== -->
	<!-- Compile the samples                                                 -->
	<!-- =================================================================== -->
	<target name="compile-sample" depends="compile">
		<javac srcdir="${build.samples}" debug="${build.debugInformation}" destdir="${build.dist.classes}" includes="**/*.java" encoding="UTF-8">
			<classpath refid="project.class.path" />
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Generate class packages                                           -->
	<!-- =================================================================== -->
	<target name="build" depends="compile">
		<mkdir dir="${build.dist.lib}" />

		<jar jarfile="${build.dist.lib}/${project.name}-${subproject1.name}-${subproject1.version}.jar" basedir="${build.dist.classes}" includes="${subproject1.classfile.includes}" excludes="${subproject1.classfile.excludes}">
			<zipfileset dir="${build.dist.classes}" includes="${subproject1.meta-inf.file.includes}" prefix="META-INF" />
			<zipfileset dir="." includes="LICENSE" prefix="META-INF" />
			<manifest>
				<attribute name="${subproject1.manifest.att1.name}" value="${subproject1.manifest.att1.value}" />
				<attribute name="${subproject1.manifest.att2.name}" value="${subproject1.manifest.att2.value}" />
				<attribute name="${subproject1.manifest.att3.name}" value="${subproject1.manifest.att3.value}" />
				<attribute name="${subproject1.manifest.att4.name}" value="${subproject1.manifest.att4.value}" />
			</manifest>
		</jar>

		<jar jarfile="${build.dist.lib}/${project.name}-${subproject2.name}-${subproject2.version}.jar" basedir="${build.dist.classes}" includes="${subproject2.classfile.includes}">
			<zipfileset dir="." includes="LICENSE" prefix="META-INF" />
			<manifest>
				<attribute name="${subproject2.manifest.att1.name}" value="${subproject2.manifest.att1.value}" />
				<attribute name="${subproject2.manifest.att2.name}" value="${subproject2.manifest.att2.value}" />
				<attribute name="${subproject2.manifest.att3.name}" value="${subproject2.manifest.att3.value}" />
				<attribute name="${subproject2.manifest.att4.name}" value="${subproject2.manifest.att4.value}" />
				<attribute name="${subproject2.manifest.att5.name}" value="${subproject2.manifest.att5.value}" />
				<attribute name="${subproject2.manifest.att6.name}" value="${subproject2.manifest.att6.value}" />
				<attribute name="${subproject2.manifest.att7.name}" value="${subproject2.manifest.att7.value}" />
				<attribute name="${subproject2.manifest.att8.name}" value="${subproject2.manifest.att8.value}" />
			</manifest>
		</jar>

		<copy todir="${build.dist.lib}">
			<fileset dir="${build.dist.classes}" includes="${jar.equivalents}" />
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Generate API document                                               -->
	<!-- =================================================================== -->
	<target name="javadoc" depends="compile">
		<mkdir dir="${build.dist.javadocs}" />

		<javadoc packagenames="${javadoc.packagenames}" sourcepath="${build.src}" destdir="${build.dist.javadocs}" author="true" version="true" use="true" splitindex="true" windowtitle="${javadoc.windowtitle}" doctitle="${javadoc.doctitle}" bottom="${javadoc.bottom}" locale="en_US" encoding="UTF-8" docencoding="UTF-8" charset="UTF-8">
			<link href="http://java.sun.com/j2se/1.5.0/docs/api" />
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Clean targets                                                       -->
	<!-- =================================================================== -->
	<target name="clean">
		<!-- delete the classpath -->
		<delete>
			<fileset dir="${build.dist.javadocs}" defaultexcludes="yes"/>
		</delete>
		<delete dir="${build.dist}" />
	</target>

	<!-- =================================================================== -->
	<!-- Release                                                             -->
	<!-- =================================================================== -->
	<target name="release" depends="build, javadoc">
		<delete dir="${build.dist.release}" />
		<mkdir dir="${build.dist.release}" />

		<property name="root" value="${project.name}-${version.major}.${version.minor}.${version.build}" />
		<!-- full release -->
		<zip zipfile="${build.dist.release}/${root}-bin.zip">
			<zipfileset dir="${build.src}" prefix="${root}/src" />
			<zipfileset dir="${build.test}" prefix="${root}/test" />
			<zipfileset dir="${build.samples}" prefix="${root}/samples" />
			<zipfileset dir="${build.dependency}" prefix="${root}/lib" />
			<zipfileset dir="${build.dist.lib}" prefix="${root}" />
			<zipfileset dir="${build.dist.docs}" prefix="${root}/docs" />
			<zipfileset dir="." includes="build.xml,project.properties,ChangeLog,INSTALL,LICENSE,NOTICE,RELEASE-NOTES" prefix="${root}" />
		</zip>

		<unzip src="${build.dist.release}/${root}-bin.zip" dest="${build.dist.release}" />
		<tar tarfile="${build.dist.release}/${root}-bin.tar" basedir="${build.dist.release}" includes="${root}/**" />
		<gzip zipfile="${build.dist.release}/${root}-bin.tar.gz" src="${build.dist.release}/${root}-bin.tar" />
		<delete file="${build.dist.release}/${root}-bin.tar" />

		<!-- only necessary jars -->
		<zip zipfile="${build.dist.release}/${root}-jars.zip">
			<zipfileset dir="${build.dependency}" prefix="${root}/lib" />
			<zipfileset dir="${build.dist.lib}" prefix="${root}" />
			<zipfileset dir="." includes="ChangeLog,LICENSE,NOTICE,RELEASE-NOTES" prefix="${root}" />
		</zip>

		<delete includeEmptyDirs="true">
			<fileset dir="${build.dist.release}/${root}" includes="**" />
		</delete>

		<unzip src="${build.dist.release}/${root}-jars.zip" dest="${build.dist.release}" />
		<tar tarfile="${build.dist.release}/${root}-jars.tar" basedir="${build.dist.release}" includes="${root}/**" />
		<gzip zipfile="${build.dist.release}/${root}-jars.tar.gz" src="${build.dist.release}/${root}-jars.tar" />
		<delete file="${build.dist.release}/${root}-jars.tar" />

		<delete dir="${build.dist.release}/${root}" />
	</target>
</project>

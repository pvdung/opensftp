<font face="Calibri" size="3">
<p align="left"><font size="4" color="blue">
Get OpenSFTP
</font></p>
----
The latest stable release:
<br>
[http://code.google.com/p/opensftp/downloads/detail?name=opensftp-0.1.0-jars.zip Binary JARs] (includes only necessary JARs)
<br>
[http://code.google.com/p/opensftp/downloads/detail?name=opensftp-0.1.0-bin.zip Package] (includes JARs, source, Javadoc, manuals, etc.)
<br><br>
Older releases can be found [ReleaseHistory here].
<p/>
<p align="left"><font size="4" color="blue">
Set Up the Class Path
</font></p>
----
Add the following JARs to your class path:
  * opensftp-api-x.x.x.jar
  * opensftp-impl-x.x.x.jar
  * All JARs in the lib folder
<p/>
<p align="left"><font size="4" color="blue">
The Simplest Example
</font></p>
----
Generally speaking, there're three steps to access and manipulate an sftp server.
  # Connect to an sftp server. Use the connection methods of `net.sf.opensftp.SftpUtil` to connect to an sftp server. The returned `net.sftp.opensftp.SftpSession` object is in charge of maintaining the communication between you and the sftp server and must be passed through when manipulating the sftp server (see below).
  # Manipulate the sftp server. Use the command methods (ls, pwd, cd, put, get, etc.) of `net.sf.opensftp.SftpUtil` to manipulate the sftp server.
  # Disconnect from the sftp server. Use the disconnection method of `net.sf.opensftp.SftpUtil` to disconnect from the sftp server.
Here is an example.
{{{
SftpUtil util = SftpUtilFactory.getSftpUtil();
SftpSession session = null;
String host = ...;
String user = ...;
String password = ...;

try {
  //connect
  session = util.connectByPasswdAuth(host, user, password,
      SftpUtil.STRICT_HOST_KEY_CHECKING_OPTION_NO);
} catch (SftpException e) {
  e.printStackTrace();
}

if (session == null)
  return;

util.help(session); //print the help information

//OpenSftp provide a default logging interceptor to capture the print the output or error message of commands.
//If you want to handle it by yourself, as follows is a samples.
SftpResult result = util.help(session);
if(result.getSuccessFlag())
  System.out.println(result.getExtension());
else
  System.out.println(result.getErrorMessage());

//here we continue
util.pwd(session); //print the working directory (current path)
util.version(session); //print the sftp version information
util.ls(session); //list the current path if path not specified
util.mkdir(session, "tmp4sftp"); //make a directory 'tmp4sftp' under current path
util.put(session, "D:/Received/README", "tmp4sftp"); //upload a file to a folder relative to the current path
util.put(session, "D:/Received/README", "tmp4sftp/README2"); //upload a file and rename the copy
util.get(session, "tmp4sftp/README2", "D:/Received"); //download a file to a specified local path
util.get(session, "tmp4sftp/README2", "D:/Received/README3"); //download a file and rename the copy
util.rename(session, "tmp4sftp/README2", "tmp4sftp/README3"); //rename a remote file
util.rm(session, "tmp4sftp/*"); //remove files
util.rmdir(session, "tmp4sftp"); //remove a directory
util.cd(session, ".."); //change directory

util.disconnect(session); //quit
}}}

<br><br>
For more examples, please jump to the [Examples] page.
<p/>
<p align="left"><font size="4" color="blue">
Where Next?
</font></p>
----
The OpenSFTP library is explored in more depth in [Cookbook].
The [CheatSheet Cheat Sheet] is an overview of the entire OpenSFTP API.
Besides, the [Javadoc] is a good helper.
<font face="Calibri" size="3">
How To
<wiki:toc max_depth="1" />

= Connect to an sftp server =

OpenSFTP enables you to connect to an sftp server by using two types of authentication - public key and password. The following table lists the connection methods for each authentication type.
|| *Authentication Type* || *API* (methods of `net.sf.opensftp.SftpUtil`) ||
|| publickey || `public SftpSession connect(String host, String user, String identityFile, int strictHostKeyChecking) throws SftpException`<br>`public SftpSession connect(String host, String user, String passphrase, String identityFile, int strictHostKeyChecking) throws SftpException`<br>`public SftpSession connect(String host, int port, String user, String passphrase, String identityFile, int strictHostKeyChecking, int timeout) throws SftpException` ||
|| password || `public SftpSession connectByPasswdAuth(String host, String user, String password, int strictHostKeyChecking) throws SftpException`<br>`public SftpSession connectByPasswdAuth(String host, int port, String user, String password, int strictHostKeyChecking, int timeout) throws SftpException` ||

The `port` parameter defaults to 22 if not specified.<br>
Available values for the `strictHostKeyChecking` parameter are `STRICT_HOST_KEY_CHECKING_OPTION_ASK`, `STRICT_HOST_KEY_CHECKING_OPTION_YES` and `STRICT_HOST_KEY_CHECKING_OPTION_NO`, corresponding to `ask`, `yes` and `no`, respectively. If you don't know what `StrictHostKeyChecking` is for, please refer to the famous OpenSSH project.<br>
The `timeout` parameter is the timeout in milliseconds.<br>
The `identityFile` parameter points out where your private keys store. If you specify a value begining with '~' and a following directory separator ('/' or '\\'), the '~' is treated as your home folder.<br>
The `passphrase` paramter defaults to `""` (an empty string) which means empty (no) passphrase.

The returned `net.sftp.opensftp.SftpSession` object is in charge of maintaining the communication between you and the sftp server and must be passed through when manipulating the sftp server (see the next session). 

Here is an example of connection.
{{{
SftpUtil util = SftpUtilFactory.getSftpUtil(); 
SftpSession session = null; 
String host = ...; 
String user = ...; 
String password = ...; 
 
try { 
  //connect 
  session = util.connectByPasswdAuth(host, user, password, 
      SftpUtil.STRICT_HOST_KEY_CHECKING_OPTION_NO); 
} catch (SftpException e) { 
  e.printStackTrace(); 
}
}}}

Please note that here I use `net.sf.opensftp.SftpUtilFactory` to obtain a singleton instance of some concrete implementation of `net.sf.opensftp.SftpUtil`. It's highly recommended to always obtain an instance of `SftpUtil` in this way, thus enabling you to use lots of advanced, exciting features at no or very little cost. For further information about these features, please jump to the [#Use_Advanced_Features] section.

= Manipulate an sftp server =

= Disconnect from an sftp server =

= Use Advanced Features =